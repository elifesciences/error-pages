<?php

## FILE GENERATED by mindplay/composer-locator @ 2017-10-26 09:19:39
##
## This file will be auto-generated and overwritten at installation.

abstract class ComposerLocator
{
    /**
     * @var string[] map where Composer vendor/package name => package path (relative to project root path)
     */
    private static $paths = array ( 'elife/error-pages' => '', 'mindplay/composer-locator' => '/vendor/mindplay/composer-locator', 'mustache/mustache' => '/vendor/mustache/mustache', 'beberlei/assert' => '/vendor/beberlei/assert', 'symfony/polyfill-mbstring' => '/vendor/symfony/polyfill-mbstring', 'psr/log' => '/vendor/psr/log', 'symfony/debug' => '/vendor/symfony/debug', 'symfony/console' => '/vendor/symfony/console', 'symfony/filesystem' => '/vendor/symfony/filesystem', 'elife/patterns' => '/vendor/elife/patterns', );

    /**
     * @param string $name Composer vendor/package name
     *
     * @return string absolute root path to package installation folder
     *
     * @throws RuntimeException if the specific package is not installed
     */
    public static function getPath($name)
    {
        $name = strtolower($name);

        if (! isset(self::$paths[$name])) {
            throw new RuntimeException("Composer package not found: {$name}");
        }

        return self::getRootPath() . self::$paths[$name];
    }

    /**
     * @return string absolute root path of Composer project
     */
    public static function getRootPath()
    {
        return dirname(dirname(dirname(dirname(__DIR__))));
    }
    
    /**
     * @param string $name Composer vendor/package name
     *
     * @return bool true, if the given package is installed
     */
    public static function isInstalled($name)
    {
        return isset(self::$paths[$name]);
    }

    /**
     * @return string[] list of "vendor/package" names
     */
    public static function getPackages()
    {
        return array_keys(self::$paths);
    }

    /**
     * @return string[] map where Composer vendor/package name => absolute root path
     */
    public static function getPaths()
    {
        $paths = [];
        
        foreach (self::$paths as $name => $path) {
            $paths[$name] = self::getRootPath() . $path;
        }
        
        return $paths;
    }
}
