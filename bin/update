#!/usr/bin/env php
<?php

use eLife\Patterns\PatternRenderer\AssetRecordingPatternRenderer;
use eLife\Patterns\PatternRenderer\MustachePatternRenderer;
use eLife\Patterns\ViewModel;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

require_once __DIR__.'/../vendor/autoload.php';

(new Application('eLife error page generator'))
    ->register('generate')
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $patternsBase = ComposerLocator::getPath('elife/patterns');
        $resourcesBase = "$patternsBase/resources";

        $rootDir = __DIR__.'/..';
        $outputDir = $rootDir.'/public';
        $pageDir = $rootDir.'/resources/mustache';
        $publicPath = 'https://s3-external-1.amazonaws.com/prod-elife-error-pages';

        $filesystem = new Filesystem();

        $mustache = new Mustache_Engine([
            'helpers' => ['assetsPath' => $publicPath.'/assets', 'assetRewrite' => '.'],
            'loader' => new Mustache_Loader_CascadingLoader([
                new Mustache_Loader_FilesystemLoader($pageDir),
                new Mustache_Loader_FilesystemLoader($patternsBase),
            ]),
        ]);

        $patternRenderer = new MustachePatternRenderer($mustache);

        $filesystem->remove($outputDir);

        $pages = [];

        $viewModels = [
            '404' => new ViewModel\NotFound(),
            '410' => new ViewModel\NotFound(),
            '4xx' => new ViewModel\ClientError(),
            '503' => new ViewModel\ServiceUnavailable(),
            '5xx' => new ViewModel\ServerError(),
        ];

        foreach ($viewModels as $fileName => $viewModel) {
            $assetRecordingPatternRenderer = new AssetRecordingPatternRenderer($patternRenderer);

            $pattern = $assetRecordingPatternRenderer->render($viewModels[] = $viewModel);

            $resourceToPath = function (string $resource) use ($resourcesBase, $publicPath) {
                return $publicPath.substr($resource, 9);
            };

            $styleSheets = array_map($resourceToPath, iterator_to_array($assetRecordingPatternRenderer->getStyleSheets()));
            $javaScripts = array_map($resourceToPath, iterator_to_array($assetRecordingPatternRenderer->getJavaScripts()));

            $filesystem->dumpFile($file = "$outputDir/$fileName.html", $pages[] = $mustache->render('page', ['error' => $pattern, 'styleSheets' => $styleSheets, 'javaScripts' => $javaScripts]));
            $output->writeln("Created $fileName.html");
        }

        $assets = [];

        foreach ($pages as $page) {
            preg_match_all('~("|\s)('.preg_quote($publicPath, '~').'[A-Za-z0-9-_./]+)("|\s)~', $page, $matches);

            $assets = array_merge($assets, $matches[2]);
        }

        $assets = array_map(function (string $asset) use ($publicPath, $resourcesBase) {
            return $resourcesBase.substr($asset, strlen($publicPath));
        }, $assets);

        foreach ($assets as $asset) {
            $files = [];

            if ('.css' === substr($asset, -4)) {
                $mapResource = $asset.'.map';
                if (is_readable($mapResource)) {
                    $assets[] = $mapResource;
                }

                preg_match_all('~url\("([A-Za-z0-9-_./]+)"\)~', file_get_contents($asset), $matches);

                $files = $matches[1];
            }

            foreach ($files as $file) {
                $assets[] = realpath(dirname($asset)."/$file");
            }
        }

        foreach (array_unique($assets) as $asset) {
            $newName = substr($asset, strlen($resourcesBase));

            $filesystem->dumpFile("$outputDir/$newName", file_get_contents($asset));
            $output->writeln('Created '.$newName);
        }
    })
    ->getApplication()
    ->setDefaultCommand('generate', true)
    ->run();
